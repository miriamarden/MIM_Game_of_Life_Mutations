function [new_gen] = mutations_check_neighbors(current_gen)

new_gen = zeros(100,100); 
dominant = 1; %input whether the mutation is dominant(1) or recessive(0)

for m = 2:99 %for rows 1 through 100
	for n = 2:99 %for columns 1 through 100
        neighbors = 0;
        mutations = 0;
        
        %Update each of the color channels
        red_channel = current_gen(:,:,1);
        green_channel = current_gen(:,:,2);
        blue_channel = current_gen(:,:,3); 
        
        %count number of neighbors%
		if current_gen(m-1,n-1) == 1
            neighbors = neighbors+1;
        end
        
		if current_gen(m-1,n) == 1
			neighbors = neighbors+1;
		end
	
		if current_gen(m-1,n+1) == 1
   			neighbors = neighbors+1;
		end
	
		if current_gen(m,n-1) == 1
			neighbors = neighbors+1;
		end
	
		if current_gen(m,n+1) == 1
			neighbors = neighbors+1;
		end
	
		if current_gen(m+1,n-1) == 1
			neighbors = neighbors+1;
		end
	
		if current_gen(m+1,n) == 1
			neighbors = neighbors+1;
		end
		
		if current_gen(m+1,n+1) == 1
           		neighbors = neighbors+1;
        end
        
       	%This section determines if cells should live or die.
		if red_channel(m,n)==1 && green_channel(m,n)==1 && blue_channel(m,n)==1
			%if cell (m,n) is alive, normal, and has less than 2 or more than 3 neighbors, then it dies.
                	if (neighbors < 2 || neighbors >3)
                		red_channel(m,n) = 0;
                        green_channel(m,n) = 0;
                        blue_channel(m,n) = 0;
                        new_gen = cat(3,red_channel, green_channel, blue_channel);
            		end
			
	    		%if cell (m,n) is alive and has 2 or 3 neighbors, then it remains alive.
            		if (neighbors == 2 || neighbors == 3)
                		red_channel(m,n) = 1;
                        green_channel(m,n) = 1;
                        blue_channel(m,n) = 1;
                        new_gen = cat(3,red_channel, green_channel, blue_channel);
                    end 
        elseif red_channel(m,n)==0 && green_channel(m,n)==0 && blue_channel(m,n)==0
			%if cell (m,n) is dead and has exactly 3 neighbors, then it becomes alive.
            		if neighbors == 3
                		%count number of mutated neighbors%
                        if red_channel(m-1,n-1)==1 && green_channel(m-1,n-1)==0 && blue_channel(m-1,n-1)==0
                            mutations = mutations+1;
                        end
        
                        if red_channel(m-1,n)==1 && green_channel(m-1,n)==0 && blue_channel(m-1,n)==0
                            mutations = mutations+1;
                        end
	
                        if red_channel(m-1,n+1)==1 && green_channel(m-1,n+1)==0 && blue_channel(m-1,n+1)==0
                            mutations = mutations+1;
                        end
	
                        if red_channel(m,n-1)==1 && green_channel(m,n-1)==0 && blue_channel(m,n-1)==0
                            mutations = mutations+1;
                        end
	
                        if red_channel(m,n+1)==1 && green_channel(m,n+1)==0 && blue_channel(m,n+1)==0
                            mutations = mutations+1;
                        end
	
                        if red_channel(m+1,n-1)==1 && green_channel(m+1,n-1)==0 && blue_channel(m+1,n-1)==0
                            mutations = mutations+1;
                        end
	
                        if red_channel(m+1,n)==1 && green_channel(m+1,n)==0 && blue_channel(m+1,n)==0
                            mutations = mutations+1;
                        end
		
                        if red_channel(m+1,n+1)==1 && green_channel(m+1,n+1)==0 && blue_channel(m+1,n+1)==0
                            mutations = mutations+1;
                        end
        
                    %Determine whether the newly born cell is mutated or normal
                    if dominant == 1 %when the mutated gene is dominant, only one of the new cell's neighbors needs to be mutated in order for the new cell to be mutated  
                        if mutations >= 1
        					red_channel(m,n) = 1;
                            green_channel(m,n) = 0;
                            blue_channel(m,n) = 0;
                            new_gen = cat(3,red_channel, green_channel, blue_channel);
                        else
                            red_channel(m,n) = 1;
                            green_channel(m,n) = 1;
                            blue_channel(m,n) = 1;
                            new_gen = cat(3,red_channel, green_channel, blue_channel);
                        end
                    else %when the mutated gene is recessive, at least 3 of its neighbors must have the mutation in order for the new cell to be mutated%
    					if mutations >=3
                            red_channel(m,n) = 1;
                            green_channel(m,n) = 0;
                            blue_channel(m,n) = 0;
                            new_gen = cat(3,red_channel, green_channel, blue_channel);
                        else
                           red_channel(m,n) = 1;
                           green_channel(m,n) = 1;
                           blue_channel(m,n) = 1;
                           new_gen = cat(3,red_channel, green_channel, blue_channel); 
                        end
                    end

                       
                    else
		    	%if cell (m,n) is dead and does not have exactly 3 neighbors, then it dies.
                           red_channel(m,n) = 0;
                           green_channel(m,n) = 0;
                           blue_channel(m,n) = 0;
                           new_gen = cat(3,red_channel, green_channel, blue_channel); 
            		end
            
            end
    end
end

mutations_show_stuff(new_gen);
axis off
end
end
