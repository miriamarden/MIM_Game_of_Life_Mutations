function [new_gen] = mutations_check_neighbors(current_gen)

new_gen = zeros(100,100); 
for_colors = ones(100,100);
dominant = 1; %input whether the mutation is dominant(1) or recessive(0)

for m = 2:99 %for rows 1 through 100
	for n = 2:99 %for columns 1 through 100
        neighbors = 0;
	%count number of neighbors%
		if current_gen(m-1,n-1) == 1
            neighbors = neighbors+1;
        end
        
		if current_gen(m-1,n) == 1
			neighbors = neighbors+1;
		end
	
		if current_gen(m-1,n+1) == 1
   			neighbors = neighbors+1;
		end
	
		if current_gen(m,n-1) == 1
			neighbors = neighbors+1;
		end
	
		if current_gen(m,n+1) == 1
			neighbors = neighbors+1;
		end
	
		if current_gen(m+1,n-1) == 1
			neighbors = neighbors+1;
		end
	
		if current_gen(m+1,n) == 1
			neighbors = neighbors+1;
		end
		
		if current_gen(m+1,n+1) == 1
           		neighbors = neighbors+1;
        end
        
       		%This section determines if cells should live or die.
		
        
		if current_gen(m,n) == 1 
			%if cell (m,n) is alive and it has less than 2 or more than 3 neighbors, then it dies.
                	if (neighbors < 2 || neighbors >3)
                		new_gen(m,n) = 0;
            		end
			
	    		%if cell (m,n) is alive and has 2 or 3 neighbors, then it remains alive.
            		if (neighbors == 2 || neighbors == 3)
                		new_gen(m,n) = 1;
            	end 
        	elseif current_gen(m,n) == 0
			%if cell (m,n) is dead and has exactly 3 neighbors, then it becomes alive.
            		if neighbors == 3
                		new_gen(m,n) = 1; 
				%count number of mutated neighbors%
				if current_gen(m-1,n-1) == mut
           				mutations = mutations+1;
        			end
        
				if current_gen(m-1,n) == mut
					mutations = mutations+1;
				end
	
				if current_gen(m-1,n+1) == mut
   					mutations = mutations+1;
				end
	
				if current_gen(m,n-1) == mut
					mutations = mutations+1;
				end
	
				if current_gen(m,n+1) == mut
					mutations = mutations+1;
				end
	
				if current_gen(m+1,n-1) == mut
					mutations = mutations+1;
				end
	
				if current_gen(m+1,n) == mut
					mutations = mutations+1;
				end
		
				if current_gen(m+1,n+1) == mut
           				mutations = mutations+1;
        			end
        
				%Determine whether the newly born cell is mutated or normal
				if dominant == 1 %when the mutated gene is dominant, only one of the new cell's neighbors needs to be mutated in order for the new cell to be mutated  
   					 if mutations >= 1
        					current_gen(m,n) = mut;
   					 end
				else %when the mutated gene is recessive, at least 3 of its neighbors must have the mutation in order for the new cell to be mutated%
    					if mutations >=3
        					current_gen(m,n) = mut;
  					end
				end

                       
                    else
		    	%if cell (m,n) is dead and does not have exactly 3 neighbors, then it dies.
                		new_gen(m,n) = 0;
            		end
            
            end
    end
end

mutations_show_stuff(new_gen);
axis off
end
