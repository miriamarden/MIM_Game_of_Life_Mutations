

%This code was written by Miriam Arden.

%The function "mutation_check_neighbors_colors" takes the current generation of cells as input, applies a series of rules to determine which cells will live, die, and become mutated, and outputs the new generation of cells.
function [new_gen] = mutations_check_neighbors_colors(current_gen)

%The user is able to set the following things.

%The user can set the colors of the live cells, dead cells, and mutated cells. For example, setting a=1, b=, and c= makes the live cells yellow. The following color combinations can be used for reference:
% Black: (0,0,0)      White: (1,1,1)      Red: (1,0,0)    Green: (0,1,0)      Blue: (0,0,1)
% Yellow: (1,1,0)     Teal:               Pink:

%Set the color for the live cells
a=1;
b=1;
c=1;

%Set the color for the dead cells 
d=0;
e=0;
f=0;

%Set the color for the mutated cells 
g=1;
h=0;
i=0;

%The user can also decide whether the mutation is dominant (dominant=1) or recessive (dominant=0)
dominant = 1;

%The user can set the prevalence of the mutation. This is the likelihood that a new cell that would otherwise be unmutated becomes mutated.
%For example, a prevalence of .1 means approximately 10% of cells that do not meet the threshold for obtaining the mutation through its neighbors will still become mutated.
prevalence = 0.1;

%The new generation starts off with all dead cells
initial = ones(100,100);
new_gen = cat(3,d*initial, e*initial, f*initial);

for m = 2:99 %for rows 1 through 100
    for n = 2:99 %for columns 1 through 100
        mutations = 0; %initialize the number of neighbors
        normal = 0; %initialize the number of mutations
        random = rand(1); %This random number will be used to determine whether a new cell randomly becomes mutated.
        
        %Update each of the color channels
        red_channel = current_gen(:,:,1);
        green_channel = current_gen(:,:,2);
        blue_channel = current_gen(:,:,3);
        
        for left_or_right = -1:1
            for up_or_down = -1:1
                if red_channel(m+left_or_right, n+up_or_down)==g && green_channel(m+left_or_right, n+up_or_down)==h && blue_channel(m+left_or_right, n+up_or_down)==i
                mutations = mutations+1;
                end
            end
        end
        for left_or_right = -1:1
            for up_or_down = -1:1
                if (red_channel(m+left_or_right, n+up_or_down)==a && green_channel(m+left_or_right, n+up_or_down)==b && blue_channel(m+left_or_right, n+up_or_down)==c) 
                normal = normal+1;
                end
            end
        end
        
        neighbors = normal+mutations;
        
        if red_channel(m,n)==a && green_channel(m,n)==b && blue_channel(m,n)==c
            cell_status = 1; %cell status is alive normal
        elseif red_channel(m,n)==g && green_channel(m,n)==h && blue_channel(m,n)==i
            cell_status = 2; %cell status is alive mutated
        else
            cell_status = 3; %cell status is dead
        end
        
        %If the cell is alive, nonmutated, and has less than 2 or more than
        %3 neighbors, then it dies. If it has exactly 2 or 3 neighbors, it
        %lives.
        if cell_status == 1
            if (neighbors < 2 || neighbors > 3)
                new_gen(m,n,1) = d;
                new_gen(m,n,2) = e;
                new_gen(m,n,3) = f;
            else
                new_gen(m,n,1) = a;
                new_gen(m,n,2) = b;
                new_gen(m,n,3) = c;
                
            end
        elseif cell_status == 2
            if (neighbors < 2 || neighbors > 3)
                new_gen(m,n,1) = d;
                new_gen(m,n,2) = e;
                new_gen(m,n,3) = f;
            else
                new_gen(m,n,1) = g;
                new_gen(m,n,2) = h;
                new_gen(m,n,3) = i;
            end
        elseif cell_status == 3
            if neighbors == 3
                if dominant==1
                    if mutations>=1 || random<=prevalence
                        new_gen(m,n,1) = g;
                        new_gen(m,n,2) = h;
                        new_gen(m,n,3) = i;
                    else
                        new_gen(m,n,1) = a;
                        new_gen(m,n,2) = b;
                        new_gen(m,n,3) = c;
                    end
                else
                    if mutations>=3 || random<=prevalence
                        new_gen(m,n,1) = g;
                        new_gen(m,n,2) = h;
                        new_gen(m,n,3) = i;
                    else
                        new_gen(m,n,1) = a;
                        new_gen(m,n,2) = b;
                        new_gen(m,n,3) = c;
                    end
                end 
            end
        end
    end %end for loop with n's
end %end for loop with m's

mutations_show_stuff_colors(current_gen);
axis off
end %end function              
